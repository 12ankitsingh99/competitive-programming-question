You are given a sorted array containing only numbers 0 and 1. Find the transition point efficiently. Transition point is a point where "0" ends and "1" begins.
Note that, if there is no "1" exists, print -1.

Input:

You have to complete the method which takes 2 argument: the array arr[] and size of array N. You should not read any input from stdin/console. There are multiple test cases. For each test cases, this method will be called individually.

Output:

Your function should return transition point.

Constraints:

1 ≤ T ≤ 100
1 ≤ N ≤ 500000
0 ≤ C[i] ≤ 1
Example:

Input
1
5
0 0 0 1 1

Output
3











solution:-
# your task is to complete this function
# finvtion should return an integer
def transitionPoint(arr, n):
    for i in range(n): 
        if(arr[i] == 1): 
            return i 
      
    # if no element is 1 
    return -1
    #Code here



solution 2L:-
def transitionPoint(arr, n): 
    if arr[0]==1:
        return 0
    lb = 0
    ub = n - 1
    
    # Perform Binary search 
    while (lb <= ub): 
	    # Find mid 
	    mid = (int)((lb + ub) / 2) 

	    # update lower_bound if 
	    # mid contains 0 
	    if (arr[mid] == 0): 
		    lb = mid + 1
    
	    # If mid contains 1 
	    elif (arr[mid] == 1): 
		    
		    # Check if it is the 
		    # left most 1 Return 
		    # mid, if yes 
		    if (arr[mid - 1] == 0): 
			    return mid 

		    # Else update 
		    # upper_bound 
		    ub = mid-1
    
    return -1
